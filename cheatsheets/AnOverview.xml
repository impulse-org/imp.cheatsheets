<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="An Overview of the Steps for Creating a new IMP IDE">
<intro>
<description>
This cheat sheet provides an overview of the process of creating a new IMP IDE
and suggests a reasonable order for pursuing the steps in that process and
making use of the other cheat sheets found under the "IMP" heading.
<br/><br/>

For several reasons we have not provided a cheat sheet for the entire process
of creating a IMP IDE:  there is only a partial ordering on the steps;
not all of the steps may be used for any particular IDE; due to the challenge
of implementing some services various steps may need to be repeated ad hoc;
and, due to the delays that may result from implementing various language services,
the interval between steps may be very large (perhaps spanning multiple Eclipse invocations).
<br/><br/>

So, instead of a large cheat sheet with several linked steps,	
in this document we just give some general guidelines about how you might want
to pursue the IMP IDE development process and leave it to you to
select the other cheat sheets as they may be of help to you.
<br/><br/>

To begin, you will need to define your new IMP IDE in its own
plugin project (this may be a new or existing plugin project, but it must
not already have been used to define a IMP IDE.)
<br/><br/>

Given a suitable plugin project, the first thing you need to do is create
a language descriptor for the language that your IDE will support.
This must be done before any of the other steps.
<br/><br/>

The next thing that must be done is to provide a grammar and a lexing/parsing
service for the language.  IMP provides support for this using LPG, but it
is also possible to use grammars and grammar processors that are developed
independently of IMP, provided they can support the implementation of key
interfaces.  In any case, since nearly all of the services in a IMP IDE
are dependent on the grammar and/or lexer and parser, this step should be
performed following the description of the language.
<br/><br/>

Once the grammar and lexing/parsing service are defined, any of several IDE
services that depend on these can be addressed:<br/>
* Token coloring<br/>
* Outlining<br/>
* Text folding<br/>
* Reference resolution<br/>
Implementing reference resolution also gives you hyperlinking for free (as this
is implemented by a IMP library class).
<br/><br/>

Some of the other services, such as Content Proposer, Builder, and Compiler
may depend on the reference resolver, and so may be implemented only after that.
<br/><br/>

Depending on what the Builder does, it may need to wait on other services.
For instance, if the Builder runs the Compiler, it will need to wait on
the implementation of the Compiler.  On the other hand, if the Builder just
runs the parser, then it can be implemented earlier in the process.
(Of course, you may also define different builders at different times.)
<br/><br/>

The wizard that creates a new Builder also creates a new Nature class
for the language.  The nature can be associated to a development project
to enable the builder to be run automatically for that project.
As a conenience, IMP provides a Nature Enabler wizard that creates
a context-menu item that allows the IMP IDE user to automatically
associate the Nature for the language with a particular development project.
The Nature Enabler wizard can be run at any time after the New Builder
wizard is run.
<br/><br/>

You can also define a Preference Service and Preference Pages.  These
actually do not depend on any of the other services (apart from the
language description), so they can be implemented at practically any time.
On the other hand, they probably will not be needed until some later
services have need of preference information.
<br/><br/>

In the cheat sheet menu we have enumerated the sheets for the
various steps in an order that is consistent with the constraints
described here.
The sheets have to be listed in some order, and it seems better that they
be listed in a correct order than in an incorrect one.
Don't feel overly bound by this listing; use the sheets in whatever order
best meets your needs.
<br/><br/>

You may also see a cheat sheet for "New IMP IDE."  This is a relic
from earlier versions of IMP that does support a series of linked
steps that represents a typical IDE development process, but note that
the descriptions of the steps are now somewhat outdated.
<br/><br/>

</description>
</intro>

<item title="Create a IMP IDE">
<description>
Please see the respective cheat sheets for the various steps in the process.
<br/><br/>
Good luck!
</description>
</item>


</cheatsheet>

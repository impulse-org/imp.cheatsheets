<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="Creating a Token Colorer for a new IMP IDE">
<intro>
<description>
The goal of this step is to create a service that will support coloring 
of text corresponding to different types of tokens when the text appears in the IDE editor.
A typical application would be keyword highlighting.
Note that attributes other than color can also be associated with the token text.
<br/><br/>
This step must be performed after the grammar and parsing service have been defined.
<br/><br/>


</description>
</intro>

<item title="Create a token colorer">
<action pluginId="org.eclipse.imp.cheatsheets"
        class="org.eclipse.imp.cheatsheets.actions.NewTokenColorerAction"/>
<description>

IMP provides a wizard to generate a skeleton class for this purpose;
this class must be specialized by the user according to details of the language and goals for the editor.
To run this wizard: invoke<br/><br/>
"File" -> "New" -> "IDE Language Support" -> "Editor Services"  ->  "Token Colorer"
<br/><br/>

As before, in the wizard assure that the names of your project and language have been correctly entered into the appropriate fields.
If desired, edit the default name of the implementation class or its package. Hit "Finish" when done.
<br/><br/>

The Token Colorer wizard creates a safari.tokenColorer package containing a TokenColorer class.
The wizard adds a tokenColorer extension to the plugin.xml file for the language project and opens the TokenColorer class in an editor.
<br/><br/>

The TokenColorer class has two important methods:  the constructor, in which a set of TextAttribut's are created
(which are later used to specify the text presentation for the various token kinds),
and the getColoring(..) method, which returns the TextAttribute to be used for the given token kind.
<br/><br/>

As you can see, getColoring() calls IToken.getKind() to determine the token kind (represented by an integer)
and uses that to compute the correct text attributes.
The set of valid token kinds is defined by the lexical analyzer; they are typically located in the JikesPG-generated
"Parsersym" interface (in the parser package) and generally start with a prefix like "TK_".
<br/><br/>

The generated TokenColorer class includes a few examples of text attributes and token colorings based on
the example expression language introduced with the grammar-file templates.
These may not compile as generated (due to inconsistencies with the generated parser and AST)
and will generally have to be tailored to the language being defined.
<br/><br/>

The generated TokenColorer class is somewhat dependent on JikesPG:<br/><br/>

    * The TokenColorer class implements a Parsersym interface that is one of the standard,
    language-specific interfaces generated by JikesPG<br/><br/>
    * The getColoring(..) method takes an instance of an IToken, which is defined in lpg.lpgjavaruntime<br/><br/>
    * The getColoring(..) method also takes an instance of an IParseController; although this is defined by IMP,
    the default implementation makes use of several types generated by JikesPG<br/><br/>

As noted elsewhere, it is possible to implement these various interfaces without using JikesPG
(although it is the intention of IMP to relieve the developer of this work by automating the implementation using JikesPG). 
<br/><br/>

</description>
</item>


</cheatsheet>
